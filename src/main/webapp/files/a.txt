java中基本数据类型 ？
Java中有八种基本类型
 浮点型  float（4），double（8）
字符类型  char（2）
数值类型  byte（1），short（2），int（4），long（8）
布尔类型 boolean（1）； 在方法调用传参时 ，这8种基本数据类型是按值传递，其余所有类型都是按引用传递。

String与StringBuffer 的区别？

在java中，String是不可变类，String对象一旦被创建，其值将不能被改变，StringBuffer是可变类，
当对象被创建后，仍然可以对它的值进行修改，因此，String适合需要被共享的场合中使用，而当一个
字符串经常需要被修改时，建议用StringBuffer。String修改时非常麻烦，会创建很多无用的对象，这些
无用的对象会被垃圾回收器回收，因此或非常影响性能。


接口和抽象类的区别？

都是支持抽象类定义的两种机制，接口表示一个实体，抽象类表示的一种概念。
接口是公开的，里面不能用私有方法和私有变量，是用于让别人看到使用的，而抽象类可以用私有方法和变量。
接口中所有的方法都没有方法体。抽象类可以被子类继承并实现其抽象方法（需要访问修饰级别大于或等于）

都不能被实例（抽象类可以通过其子类实例，子类必须实现父类所有的抽象方法，否则子类也是一个抽象类，接口的实例也是通过其实现类）  ，
接口只能有方法的声明，抽象类中可以含有方法的实现，接口可以多继承以及多实现，间接的达到了多重继承的目的


实现多线程的方法有哪几种？

jvm是运行所有java程序的抽象计算机，是java程序的运行环境，jvm允许程序并发的运行多个线程。
实现多线程有三个方法  
1.继承Thread类，重新run方法。调用start（）方法
2.实现Runnable接口，并实现run方法，调用start（）方法
3.实现Callable接口，重新call（）方法


文件上传
1，指定表单类型为文件上传表单   Enctype“multipart/form-data”
2，提交方式问post，因为get会限制大小
3,表单中存在文件域元素    


mvc在B/S中的应用       用户请求（request）--》控制器（接收用户请求，并且响应（如Strust2中的filter））--》请求模型进行处理（service，dao，action，pojo）--》处理结果返回到控制器，进行试图渲染，将模型数据填充到request域并提交到--》view，控制器响应

SpringMVC 用户请求--》前端控制器（dispatcherServlet）---》请求查找handler（平常叫controller）通过handlerMapping   

处理器适配器  HandlerAdapter   去执行Handler（不同的handler由不同的适配器去执行）


视图有多种（jsp，freemarker，excel，pdf等）  前端控制器（dispatcherServlet）交给视图解析器（view resolver） 返回一个真正的视图（view）


第一步：发起请求到前端控制器 （dispatherServlet）
第二步：前端控制器请求（HandlerMapping）查找handler，可以根据xml配置、注解进行查找。
第三步：处理器映射器（handlermapping）向前端返回handler
第四步：前端控制器调用处理器适配器（handleradapter）去执行handler
第五步：处理器适配器去执行handler
第六步：handler执行完给适配器返回modelandView
第七步：处理器适配器向前端控制器返回ModerAndView，springmvc框架的一个底层对象，包括model和view

第八步：前端控制器请求视图解析器去进行视图解析（根据逻辑视图名解析成真正的视图（jsp等））
第九步：视图解析器向前端控制器返回view；
第十步：前端控制器进行视图渲染，将模型数据（modelandview）填充到request域
第十一步：前端控制器向用户响应

1.前端控制器DispatcherServlet（不需要程序员开发，框架提供）
作用：接收请求，响应结果，相当于转发器，中央处理器
有了它，就减少了其它组件之间的耦合度。

2.处理器映射器HandlerMapping（不需要程序员开发）
作用：根据请求的url查找handler （xml配置、注解）

3.处理器适配器HandlerAdapter
作用：按照特定的规则（HandlerAdapter要求的规则）去执行Handler
注意：编写handler是按照HandlerAdapter要求的规则去做，这样适配器才能正确执行handler

4.视图解析器 View resolver（不需要程序员开发）
作用：进行视图解析，根据逻辑视图名解析成真正的视图（View）
5.视图 View（需要程序员开发jsp）

View是一个接口，实现类支持不同的View类型（jsp，freemarker，excel，pdf）
6.处理器handler（需要程序员开发）


hibernate与mybatis的区别：
 hibernate是一个标准的ORM框架，比较重量级，学习成本高。
	优点：高度封装，使用起来不用写sql，开发时间短，减低开发周期。
	缺点：sql语句无法优化
	应用场景：oa（办公自动化系统），erp（企业流程系统）等，还有一些政府项目。总的来说，在用户量不大，并发量小的时候使用。

mybatis：它不是一个ORM框架，它是对jdbc的轻量级封装，学习成本低，比较简单。
	优点：学习成本低，sql语句可以优化，执行效率高，速度快。
	缺点：编码量较大，会拖慢开发周期。
	应用场景：互联网项目，比如电商，P2P等。总的来说是，用户量较大，并发高的项目。



SSM web.xml：spring的核心监听器，spring
spring 配置文件核心点（包扫描，扫描除了控制器以外的包，数据源，与mybatis的整合，事务控制）
springmvc配置文件核心店（包扫描，只扫描控制器，视图解析器（前缀后缀））



1.创建一个maven工程
2.引入项目依赖的jar包：
	spring
	springmvc	
	mybatis
	数据库连接池，驱动包
	其它（jstl，servlet-api，junit）
3.前端框架（css，js，jquery）
4.编写ssm整合的关键配置文件
	web.xml：spring的核心监听器（contextLoaderListener），springmvc的前端控制器dispatherServlet，字符编码过滤器 charactorEncodingFilter（设置请求编码以及响应编码，放在所有过滤器之前），采用rest风格的URL，需要设置hiddenHttpMethodFilter（将页面普通的post请求转为指定的delete或者put请求）
	spring
	springmvc
	mybatis


webservice：http+xml实现通信，效率慢。

restful：http+json实现通信，如果项目太负责，那么url管理困难。

dubbo是一个阿里的开源框架，是资源调度和治理中心的管理工具，它底层采用socket（二进制的流）实现服务器之间的通信，效率高
	功能：1.实现系统之间的通信；
	2.统计和管理服务之间的调用情况。




SpringMVC 搭建：
1.引入依赖。
2.配置前端控制器（dispathServlet）web.xml中 拦截形式/  拦截除jsp外所有内容
3.配置springmvc.xml：扫描组件：controller，注解驱动：视图解析器  资源映射
4.编写controller
5.如果出现乱码。在web.xml配置字符编码过滤器（characterEncodingFilter）
6.如果页面传过来的参数与形参不一致，可用@requestParam注解，value属性，defaultvalue属性，require属性（为true则表示必须传该值，不能为null）
如果页面传递的是复杂参数，多个同名参数，如checkbox，咋需要在controller方法参数中加入 @requestParam注解 并且参数类型用List




 